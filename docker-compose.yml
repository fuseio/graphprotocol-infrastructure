version: '2.1'

networks:
  monitor-net:
    driver: bridge

volumes:
    ipfs_data: {}
    prometheus_data: {}
    grafana_data: {}
    postgres_data: {}
    nginx_certs: {}
    nginx_vhost: {}
    nginx_html: {}

services:



################# IPFS container ############################


  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    container_name: ipfs-node
    volumes:
      - ipfs_data:/data/ipfs
    ports:
      - 127.0.0.1:5001:5001
    networks:
      - monitor-net
    expose:
      - 5001




################## graph-node container #####################




  graph-node:
    image: graphprotocol/graph-node:latest
    container_name: graph-node
    depends_on:
      - postgres
    environment:
      postgres_host: postgres:5432
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-let-me-in}
      postgres_db: ${DB_NAME:-graph-node}
      ipfs: http://ipfs-node:5001
      ethereum: '${ETHEREUM}'
      ETHEREUM_START_BLOCK: ${ETHEREUM_START_BLOCK:-7710671}
      RUST_LOG: info
      VIRTUAL_HOST: ${GRAPH_NODE}
      VIRTUAL_PORT: 8000
      LETSENCRYPT_HOST: ${GRAPH_NODE}
    restart: unless-stopped
    ports:
      - 127.0.0.1:8000:8000
    expose:
      - 8001
      - 8000
      - 8030
      - 8040
    networks:
      - monitor-net






################## nginx-proxy container #####################




  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    networks:
      - monitor-net
    restart: unless-stopped





################## nginx-ssl container #####################





  nginx-ssl:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-ssl
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - monitor-net
    restart: unless-stopped
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      DEFAULT_EMAIL: ${EMAIL}






################## postgres container #####################



  postgres:
    image: postgres:latest
    container_name: postgres
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-let-me-in}
      POSTGRES_DB: ${DB_NAME:-graph-node}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitor-net
    expose:
      - 5432





################## prometheus container #####################




  prometheus:
    image: prom/prometheus:v2.20.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"






################## alert-manager container #####################






  alertmanager:
    image: prom/alertmanager:v0.21.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"






################## node-exporter container #####################




  nodeexporter:
    image: prom/node-exporter:v1.0.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"




################## cadvisor container #####################






  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.37.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"




################## grafana container #####################





  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=true
      - postgres_host=postgres
      - postgres_user=${DB_USER:-graph-node}
      - postgres_pass=${DB_PASS:-let-me-in}
      - postgres_db=${DB_NAME:-graph-node}
      - VIRTUAL_HOST=${GRAFANA_HOST}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${GRAFANA_HOST}
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"





################## pushgateway container #####################





  pushgateway:
    image: prom/pushgateway:v1.2.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"




################## caddy container #####################





  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      - "8000:8000"
      - "8001:8001"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
